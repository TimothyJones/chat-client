// Automatically generated by MockGen. DO NOT EDIT!
// Source: main.go

package mock_main

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of logFuncs interface
type MocklogFuncs struct {
	ctrl     *gomock.Controller
	recorder *_MocklogFuncsRecorder
}

// Recorder for MocklogFuncs (not exported)
type _MocklogFuncsRecorder struct {
	mock *MocklogFuncs
}

func NewMocklogFuncs(ctrl *gomock.Controller) *MocklogFuncs {
	mock := &MocklogFuncs{ctrl: ctrl}
	mock.recorder = &_MocklogFuncsRecorder{mock}
	return mock
}

func (_m *MocklogFuncs) EXPECT() *_MocklogFuncsRecorder {
	return _m.recorder
}

func (_m *MocklogFuncs) Println(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Println", _s...)
}

func (_mr *_MocklogFuncsRecorder) Println(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Println", arg0...)
}

func (_m *MocklogFuncs) Fatal(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Fatal", _s...)
}

func (_mr *_MocklogFuncsRecorder) Fatal(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fatal", arg0...)
}

func (_m *MocklogFuncs) Printf(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Printf", _s...)
}

func (_mr *_MocklogFuncsRecorder) Printf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Printf", _s...)
}
